// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.0 Build 711 06/05/2020 SJ Lite Edition"

// DATE "12/04/2020 21:56:44"

// 
// Device: Altera EP4CE75F23I8L Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module sistema_alarme (
	J,
	P,
	I,
	Y,
	ENABLE,
	A);
input 	[3:0] J;
input 	P;
input 	I;
input 	Y;
input 	ENABLE;
output 	A;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \A~output_o ;
wire \Y~input_o ;
wire \ENABLE~input_o ;
wire \P~input_o ;
wire \J[0]~input_o ;
wire \J[1]~input_o ;
wire \J[2]~input_o ;
wire \J[3]~input_o ;
wire \K|S2~0_combout ;
wire \K|S2~1_combout ;
wire \I~input_o ;
wire \K|S2~2_combout ;


cycloneive_io_obuf \A~output (
	.i(\K|S2~2_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\A~output_o ),
	.obar());
// synopsys translate_off
defparam \A~output .bus_hold = "false";
defparam \A~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \Y~input (
	.i(Y),
	.ibar(gnd),
	.o(\Y~input_o ));
// synopsys translate_off
defparam \Y~input .bus_hold = "false";
defparam \Y~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \ENABLE~input (
	.i(ENABLE),
	.ibar(gnd),
	.o(\ENABLE~input_o ));
// synopsys translate_off
defparam \ENABLE~input .bus_hold = "false";
defparam \ENABLE~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \P~input (
	.i(P),
	.ibar(gnd),
	.o(\P~input_o ));
// synopsys translate_off
defparam \P~input .bus_hold = "false";
defparam \P~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \J[0]~input (
	.i(J[0]),
	.ibar(gnd),
	.o(\J[0]~input_o ));
// synopsys translate_off
defparam \J[0]~input .bus_hold = "false";
defparam \J[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \J[1]~input (
	.i(J[1]),
	.ibar(gnd),
	.o(\J[1]~input_o ));
// synopsys translate_off
defparam \J[1]~input .bus_hold = "false";
defparam \J[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \J[2]~input (
	.i(J[2]),
	.ibar(gnd),
	.o(\J[2]~input_o ));
// synopsys translate_off
defparam \J[2]~input .bus_hold = "false";
defparam \J[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \J[3]~input (
	.i(J[3]),
	.ibar(gnd),
	.o(\J[3]~input_o ));
// synopsys translate_off
defparam \J[3]~input .bus_hold = "false";
defparam \J[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \K|S2~0 (
// Equation(s):
// \K|S2~0_combout  = (\J[0]~input_o ) # ((\J[1]~input_o ) # ((\J[2]~input_o ) # (\J[3]~input_o )))

	.dataa(\J[0]~input_o ),
	.datab(\J[1]~input_o ),
	.datac(\J[2]~input_o ),
	.datad(\J[3]~input_o ),
	.cin(gnd),
	.combout(\K|S2~0_combout ),
	.cout());
// synopsys translate_off
defparam \K|S2~0 .lut_mask = 16'hFFFE;
defparam \K|S2~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \K|S2~1 (
// Equation(s):
// \K|S2~1_combout  = (\Y~input_o  & (\ENABLE~input_o  & ((\P~input_o ) # (\K|S2~0_combout ))))

	.dataa(\Y~input_o ),
	.datab(\ENABLE~input_o ),
	.datac(\P~input_o ),
	.datad(\K|S2~0_combout ),
	.cin(gnd),
	.combout(\K|S2~1_combout ),
	.cout());
// synopsys translate_off
defparam \K|S2~1 .lut_mask = 16'h8880;
defparam \K|S2~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \I~input (
	.i(I),
	.ibar(gnd),
	.o(\I~input_o ));
// synopsys translate_off
defparam \I~input .bus_hold = "false";
defparam \I~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \K|S2~2 (
// Equation(s):
// \K|S2~2_combout  = (\K|S2~1_combout ) # ((\ENABLE~input_o  & (\I~input_o  & !\Y~input_o )))

	.dataa(\K|S2~1_combout ),
	.datab(\ENABLE~input_o ),
	.datac(\I~input_o ),
	.datad(\Y~input_o ),
	.cin(gnd),
	.combout(\K|S2~2_combout ),
	.cout());
// synopsys translate_off
defparam \K|S2~2 .lut_mask = 16'hAAEA;
defparam \K|S2~2 .sum_lutc_input = "datac";
// synopsys translate_on

assign A = \A~output_o ;

endmodule
