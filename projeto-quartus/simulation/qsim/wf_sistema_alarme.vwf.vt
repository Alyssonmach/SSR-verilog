// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2020 21:56:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sistema_alarme
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sistema_alarme_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ENABLE;
reg I;
reg [3:0] J;
reg P;
reg Y;
// wires                                               
wire A;

// assign statements (if any)                          
sistema_alarme i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ENABLE(ENABLE),
	.I(I),
	.J(J),
	.P(P),
	.Y(Y)
);
initial 
begin 
#10000000 $finish;
end 

// ENABLE
initial
begin
	ENABLE = 1'b1;
end 

// I
initial
begin
	I = 1'b0;
	I = #7000000 1'b1;
end 
// J[ 3 ]
initial
begin
	J[3] = 1'b0;
end 
// J[ 2 ]
initial
begin
	J[2] = 1'b0;
end 
// J[ 1 ]
initial
begin
	J[1] = 1'b0;
end 
// J[ 0 ]
initial
begin
	J[0] = 1'b0;
end 

// P
initial
begin
	P = 1'b1;
	P = #3000000 1'b0;
	P = #3000000 1'b1;
	P = #3000000 1'b0;
end 

// Y
always
begin
	Y = 1'b0;
	Y = #5000000 1'b1;
	#5000000;
end 
endmodule

